name: jfrogtest

on:
  workflow_dispatch:
  push:
    branches: 
    - main
    paths:
    - 'src/packer/backend/**'
    - 'src/dotnet/backend/**'

env:
  DOTNET_VERSION: '6.0.401' # The .NET SDK version to use
  PACKER_VERSION: '1.9.4' # The version of Packer to use
  WORKING_DIRECTORY: "./src/packer/backend"
  DOTNET_WORKING_DIRECTORY: "./src/dotnet/backend/FleetAPI"

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install dependencies
      run: dotnet restore
      working-directory: ${{ env.DOTNET_WORKING_DIRECTORY }}
      
    - name: Build
      run: dotnet build --configuration Release --no-restore
      working-directory: ${{ env.DOTNET_WORKING_DIRECTORY }}
      
    - name: Display structure of downloaded files
      run: ls -R
      working-directory: ${{ env.DOTNET_WORKING_DIRECTORY }}

    - name: Publish
      run: |
        pwd
        ls
        dotnet publish ./FleetAPI.csproj -c Release -o ./publish
      working-directory: ${{ env.DOTNET_WORKING_DIRECTORY }}

    - name: Generate the Deployment Package
      run: |
        zip -r ../deployment.zip ./
      working-directory: ${{ env.DOTNET_WORKING_DIRECTORY }}/publish
      
    - name: Display structure of downloaded files
      run: ls -R
      working-directory: ${{ env.DOTNET_WORKING_DIRECTORY }}

    - name: Upload Deployment Package
      uses: actions/upload-artifact@v4
      with:
        name: dotnet-deployment
        path: ${{ env.DOTNET_WORKING_DIRECTORY }}/deployment.zip
    - name: Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v4
      env:
        # JFrog platform url (for example: https://acme.jfrog.io)
        JF_URL: ${{ vars.JF_URL }}

        # JFrog Platform access token
        JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

        # Basic authentication credentials
        ## JF_USER: ${{ secrets.JF_USER }}
        ## JF_PASSWORD: ${{ secrets.JF_PASSWORD }}

    - name: Run JFrog CLI
      run: |
        # Ping the server
        jf rt ping
        # Collect environment variables for the build
        jf rt bce
        # Collect VCS details from git and add them to the build
        jf rt bag
        # Publish build info
        jf rt bp        
